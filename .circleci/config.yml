# Use the latest 2.1 version of CircleCI pipeline process engine.
# See: https://circleci.com/docs/2.0/configuration-reference
version: 2.1

# build the Docker image and run the tests
# if all the tests pass, push the image to ECR
# then invoke Terraform Cloud to deploy the new image

orbs:
  aws-ecr: circleci/aws-ecr@8.1.2
  terraform: circleci/terraform@3.2.0

parameters:
  terraform-app:
    type: string
    default: graphql
  terraform-setup:
    type: string
    default: deploy/setup/graphql
  terraform-version:
    type: string
    default: 1.2.2
  primary_region:
    type: string
    default: "usw2"

executors:
  build:
    machine:
      image: ubuntu-2004:202201-01

commands:
  terraform-deploy:
    parameters:
      terraform-workspace:
        type: string
    steps:
      - run:
          name: "Checkout Terraform sources"
          command: |
            git clone git@github.com:engi-network/deploy.git
      - run:
          name: Create .terraformrc file locally
          command: |
            echo "credentials \"app.terraform.io\" {token =
            \"$TERRAFORM_TOKEN\"}" > $HOME/.terraformrc
      - terraform/install:
          terraform_version: << pipeline.parameters.terraform-version >>
      - run:
          command: |
            echo 'TF_WORKSPACE="<< parameters.terraform-workspace >>" /usr/local/bin/terraform $*' > ~/bin/terraform
            chmod +x ~/bin/terraform
      - terraform/plan:
          path: << pipeline.parameters.terraform-setup >>
          out: /tmp/terraform.plan
      - terraform/apply:
          path: << pipeline.parameters.terraform-setup >>
          plan: /tmp/terraform.plan

# Define a job to be invoked later in a workflow.
# See: https://circleci.com/docs/2.0/configuration-reference/#jobs
jobs:
  deploy:
    executor: build
    parameters:
      environment:
        type: string
      region:
        type: string
    steps:
      - when:
          condition:
            equal:
              [
                << pipeline.parameters.primary_region >>,
                << parameters.region >>,
              ]
          steps:
            - terraform-deploy:
                terraform-workspace: "<< pipeline.parameters.terraform-app >>-<< parameters.environment >>"
      - unless:
          condition:
            equal:
              [
                << pipeline.parameters.primary_region >>,
                << parameters.region >>,
              ]
          steps:
            - terraform-deploy:
                terraform-workspace: "<< pipeline.parameters.terraform-app >>-<< parameters.environment >>-<< parameters.region >>"
  build:
    executor: build
    parameters:
      environment:
        type: string
    steps:
      - checkout
      - aws-ecr/build-and-push-image:
          repo: "<< pipeline.parameters.terraform-app >>-<< parameters.environment >>"
          create-repo: true
          tag: latest
          registry-id: AWS_ID
          extra-build-args: "--build-arg BUILD_VERSION=$CIRCLE_BUILD_NUM"
          platform: "linux/amd64,linux/arm64"

# Invoke jobs via workflows
# See: https://circleci.com/docs/2.0/configuration-reference/#workflows
workflows:
  build-test-push-workflow:
    jobs:
      - build:
          name: build-staging
          environment: staging
          context:
            - aws
          filters:
            tags:
              only: ""
      - deploy:
          name: deploy-staging-<< matrix.region >>
          environment: staging
          requires:
            - build-staging
          matrix:
            parameters:
              region:
                - use1
                - use2
                - usw1
                - usw2
          context:
            - terraform
            - aws
          filters:
            branches:
              only: main
      - build:
          name: build-production
          environment: production
          context:
            - aws
          filters:
            tags:
              only: /^v.*/
            branches:
              ignore: /.*/
      - deploy:
          name: deploy-production-<< matrix.region >>
          environment: production
          requires:
            - build-production
          context:
            - terraform
            - aws
          matrix:
            parameters:
              region:
                - use1
                - use2
                - usw1
                - usw2
          filters:
            tags:
              only: /^v.*/
            branches:
              ignore: /.*/
